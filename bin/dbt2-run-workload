#!/bin/sh

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2002-2006 Open Source Development Labs, Inc.
#               2002-2010 Mark Wong
#

trap 'echo "Test was interrupted by Control-C."; \
	killall dbt2-client dbt2-driver sar sadc vmstat iostat mpstat iopp; ${DB_COMMAND} dbt2-${DBMS}-stop-db; ${DB_COMMAND} killall dbt2-${DBMS}-db-stat sar sadc vmstat iostat mpstat iopp' INT
trap 'echo "Test was interrupted. Got TERM signal."; \
	killall dbt2-client dbt2-driver sar sadc vmstat iostat mpstat iopp; ${DB_COMMAND} dbt2-${DBMS}-stop-db; ${DB_COMMAND} killall dbt2-${DBMS}-db-stat sar sadc vmstat iostat mpstat iop' TERM

do_sleep()
{
	echo "Sleeping $1 seconds"
	sleep $1
}

make_directories()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	fi
	${COMMAND} mkdir -p ${OUTPUT_DIR}
	${COMMAND} mkdir -p ${CLIENT_OUTPUT_DIR}/`hostname`
	${COMMAND} mkdir -p ${DRIVER_OUTPUT_DIR}/`hostname`
	${COMMAND} mkdir -p ${DB_OUTPUT_DIR}
}

oprofile_annotate()
{
	COMMAND=""
	DIR=${1}
	HOST=${2}
	OPROFILE_DIR=${DIR}/oprofile
	ANNOTATED_DIR=${OPROFILE_DIR}/annotated
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "oprofile is annotating source: ${HOST}"
	${COMMAND} mkdir -p ${OPROFILE_DIR}
	${COMMAND} mkdir -p ${ANNOTATED_DIR}
	if [ -n "${COMMAND}" ]; then
		${COMMAND} "sudo opannotate --source \
				--assembly > ${OPROFILE_DIR}/assembly.txt 2>&1"
	else
		sudo opannotate --source --assembly > ${OPROFILE_DIR}/assembly.txt 2>&1
	fi
	${COMMAND} sudo opannotate --source --output-dir=${ANNOTATED_DIR}
	IAM=`whoami`
	${COMMAND} sudo chown -R ${IAM} ${OPROFILE_DIR}
}

oprofile_collect()
{
	COMMAND=""
	DIR=${1}
	HOST=${2}
	OPROFILE_DIR=${DIR}/oprofile
	ANNOTATED_DIR=${OPROFILE_DIR}/annotated
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	mkdir -p ${OPROFILE_DIR}
	mkdir -p ${ANNOTATED_DIR}
	#
	# I don't think we need any output dumped to the terminal.
	#
	echo "oprofile is dumping data: ${HOST}"
	${COMMAND} sudo opcontrol --dump
	if [ -n "${COMMAND}" ]; then
		${COMMAND} mkdir -p ${OPROFILE_DIR}
		${COMMAND} mkdir -p ${ANNOTATED_DIR}
		echo "Generating oprofile profile on '${HOST}'..."
		${COMMAND} "sudo opreport -l -p /lib/modules/`${COMMAND} uname -r` -o ${DIR}/oprofile.txt > ${OPROFILE_DIR}/oprofile.log 2>&1"
		echo "Generating oprofile callgraph on '${HOST}'..."
		${COMMAND} "sudo opreport -l -c -p /lib/modules/`${COMMAND} uname -r` -o ${OPROFILE_DIR}/callgraph.txt > ${OPROFILE_DIR}/oprofile.log 2>&1"
	else
		echo "Generating oprofile profile..."
		sudo opreport -l -p /lib/modules/`uname -r` \
				-o ${OPROFILE_DIR}/oprofile.txt > \
				${OPROFILE_DIR}/oprofile.log 2>&1
		echo "Generating oprofile callgraph..."
		sudo opreport -l -c -p /lib/modules/`uname -r` \
				-o ${OPROFILE_DIR}/callgraph.txt > \
				${OPROFILE_DIR}/oprofile.log 2>&1
	fi
	${COMMAND} sudo opcontrol --stop
	IAM=`whoami`
	${COMMAND} sudo chown -R ${IAM} ${OPROFILE_DIR}
}

oprofile_init()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "starting oprofile: ${HOST}"
	${COMMAND} sudo opcontrol \
			--vmlinux=/lib/modules/`${COMMAND} uname -r`/vmlinux \
			-c 100
	sleep 1
	START_ARGS=""
	MACHINE=`${COMMAND} uname -m`
	if [ "${MACHINE}" = "ppc64" ]; then
		#
		# Oprofile fails to work on ppc64 because the defaults settings
		# are invalid on this platform.  Why isn't it smart enough to
		# have valid default setting depending on arch?
		#
		START_ARGS="-e CYCLES:150000:0:1:1"
	fi
	${COMMAND} sudo opcontrol --start-daemon ${START_ARGS}
	sleep 1
	${COMMAND} sudo opcontrol --start
}

oprofile_reset()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "resetting oprofile counters: ${HOST}"
	${COMMAND} sudo opcontrol --reset
}

oprofile_stop()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "stopping oprofile daemon: ${HOST}"
	${COMMAND} sudo opcontrol --shutdown
}

perf_start()
{
	COMMAND=""
	DIR=${1}
	HOST=${2}

	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi

	${COMMAND} sudo perf record -o ${DIR}/perf.data -a -g -s sleep ${DURATION}
}

perf_collect()
{
	COMMAND=""
	DIR=${1}
	HOST=${2}

	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi

	echo "Generating perf report on '${HOST}'..."
	${COMMAND} sudo perf report \
			-i ${DIR}/perf.data -n > ${DIR}/perf-report.txt &
	echo "Generating perf annotated source on '${HOST}'..."
	${COMMAND} sudo perf annotate -l -P \
			-i ${DIR}/perf.data > ${DIR}/perf-annotate.txt &
	echo "Generating perf trace on '${HOST}'..."
	${COMMAND} sudo perf script -L \
			-i ${DIR}/perf.data > ${DIR}/perf-trace.txt &
}

post_process_sar()
{
	COMMAND=""
	FILE=${1}
	HOST=${2}
	if [ ! "x${HOST}" = "x" ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		COMMAND="ssh ${HOST}"
		${COMMAND} "which sar > /dev/null" 2>&1
		if [ $? -eq 0 ]; then
			SAR=sar
		else
			SAR=true
		fi
		${COMMAND} "${SAR} -f ${FILE} -A > `dirname ${FILE}`/sar.out"
	else
		which sar > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			SAR=sar
		else
			SAR=true
		fi
		${SAR} -f ${FILE} -A > `dirname ${FILE}`/sar.out
	fi
}

readprofile_collect()
{
	COMMAND=""
	DIR=${1}
	HOST=${2}
	RP_DIR=${DIR}/readprofile
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "collecting readprofile data: ${HOST}"
	PROFILE=${RP_DIR}/readprofile.txt
	if [ -n "${COMMAND}" ]; then
		${COMMAND} mkdir -p ${RP_DIR}
		${COMMAND} "/usr/sbin/readprofile -n -m /boot/System.map-`${COMMAND} uname -r` > ${PROFILE}"
		${COMMAND} "cat ${PROFILE} | sort -n -r -k1 > ${RP_DIR}/readprofile_ticks.txt"
		${COMMAND} "cat ${PROFILE} | sort -n -r -k3 > ${RP_DIR}/readprofile_load.txt"
	else
		mkdir -p ${RP_DIR}
		/usr/sbin/readprofile -n -m /boot/System.map-`uname -r` > ${PROFILE}
		cat ${PROFILE} | sort -n -r -k1 > ${RP_DIR}/readprofile_ticks.txt
		cat ${PROFILE} | sort -n -r -k3 > ${RP_DIR}/readprofile_load.txt
	fi
}

readprofile_clear()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "clearing readprofile data: ${HOST}"
	${COMMAND} sudo /usr/sbin/readprofile -r
}

usage()
{
	if [ "$1" != "" ]; then
		echo
		echo "error: $1"
	fi
	echo
	echo "usage: `basename $0` -h"
	echo "usage: `basename $0` -a <drizzle|mysql|pgsql|sqlite>"
	echo "       -c <number of database connections> -d <seconds>"
	echo "       -w <number of warehouses> -o <path> [options]"
	echo "options:"
	echo "       -H <database host name. (default localhost)>"
	if [ "${DBMS}" = "drizzle" ]; then
		echo "       -i <drizzle working or installation directory>"
	fi
	echo "       -l <database port number>"
	echo "       -q <enable oprofile data collection>"
	echo "       -r <enable perf data collection>"
	echo "       -s <delay of starting of new threads in milliseconds>"
	echo "       -n <no thinking or keying time (default no)>"
	if [ "${DBMS}" = "pgsql" ]; then
		echo "       -p <GUC overrides>"
	fi
	echo "       -D <database name>"
	if [ "${DBMS}" = "mysql" ]; then
		echo "       -u <database user>"
		echo "       -x <database password>"
	fi
	echo "       -z <comments for the test>"
	echo
	echo "Example: dbt2-run-workload -c 20 -d 100 -w 1"
	echo "Test will be run for 120 seconds with 20 database connections and"
	echo "scale factor (num of warehouses) 1."
	echo
}

validate_parameter()
{
	if [ "$2" != "$3" ]; then
		usage "wrong argument '$2' for parameter '-$1'"
		exit 1
	fi
}

DB_HOSTNAME="localhost"
DB_PASSWORD=""
CLIENT_HOSTNAME="localhost"
WORKING_DIR=""

DB_USER=${DBUSER}
SLEEPY=1000 # milliseconds
USE_OPROFILE=0
USE_PERF=0
THREADS_PER_WAREHOUSE=10
USE_PGPOOL=0

while getopts "a:b:c:D:d:H:hi:l:no:p:qrS:s:t:u:w:x:z:" opt; do
	case $opt in
	a)
		DBMS=${OPTARG}
		export DATABASE=${DBMS}
		;;
	b)
		# Number of warehouses per driver.
		W_CHUNK=${OPTARG}
		;;
	c)
		# Check for numeric value
		DBCON=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $DBCON
		;;
	D)
		DBNAME=${OPTARG}
		;;
	d)
		DURATION=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $DURATION
		;;
	H)
		DB_HOSTNAME=${OPTARG}
		;;
	h)
		usage
		exit 1
		;;
	i)
		# installation or working directory where drizzled and drizzle can be
		# found
		WORKING_DIR=${OPTARG}
		MISC_ARG="${MISC_ARG} -w ${WORKING_DIR}"
		;;
	l)
		DB_PORT=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $DB_PORT
		;;
	n)
		NO_THINK="-ktd 0 -ktn 0 -kto 0 -ktp 0 -kts 0 -ttd 0 -ttn 0 -tto 0 -ttp 0 -tts 0"
		;;
	o)
		OUTPUT_DIR=${OPTARG}
		;;
	p)
		DB_PARAMS="${OPTARG}"
		DB_PARAMS_ARG="-p \"${OPTARG}\""
		;;
	q)
		USE_OPROFILE=1
		;;
	r)
		USE_PERF=1
		;;
	S)
		SOCK_FILE=${OPTARG}
		SOCK_FILE_ARG="-t ${OPTARG}"
		;;
	s)
		SLEEPY=`echo ${OPTARG} | egrep "^[0-9]+$"`
		validate_parameter ${opt} ${OPTARG} ${SLEEPY}
		;;
	t)
		THREADS_PER_WAREHOUSE=`echo ${OPTARG} | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $THREADS_PER_WAREHOUSE
		;;
	u)
		DB_USER=${OPTARG}
		;;
	w)
		WAREHOUSES=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $WAREHOUSES
		;;
	x)
		DB_PASSWORD=${OPTARG}
		;;
	z)
		COMMENT=$OPTARG
		;;
	esac
done


# If no chunking of warehouses per process is defined, assumed we want to run
# everything from one process.
if [ "x${W_CHUNK}" = "x" ]; then
	W_CHUNK=${WAREHOUSES}
fi

# Check parameters.

if [ "x${DBMS}" = "x" ]; then
	echo "specify which dbms system to test using -a <drizzle|mysql|pgsql|sqlite>"
	exit 1
fi

if [ "x${DBCON}" = "x" ]; then
	echo "specify the number of database connections using -c #"
	exit 1
fi

if [ "x${DURATION}" = "x" ]; then
	echo "specify the duration of the test in seconds using -d #"
	exit 1
fi

if [ "x${WAREHOUSES}" = "x" ]; then
	echo "specify the number of warehouses using -w #"
	exit 1
fi

if [ "x${OUTPUT_DIR}" = "x" ]; then
	echo "specify the location for results, directory must not exist, using -o <path>"
	exit 1
fi

if [ -d "${OUTPUT_DIR}" ]; then
	echo "directory '${OUTPUT_DIR}' exists, stopping to prevent possible"
	echo "clobbering of data, please specify another -o location"
	exit 1
fi

if [ ${THREADS_PER_WAREHOUSE} -lt 1 ] || [ ${THREADS_PER_WAREHOUSE} -gt 1000 ];
then
	usage "-t value should be in range [1..1000]. Please specify correct value"
	exit 1
fi

if [ ! "x${DB_PORT}" = "x" ]; then
	DB_PORT_ARG="-l ${DB_PORT}"

	# Drizzle specific handling of passing around non-standard port.
	if [ "x${DBMS}" = "xdrizzle" ]; then
		MISC_ARG="${MISC_ARG} ${DB_PORT_ARG}"
	fi
fi

ULIMIT_N=`ulimit -n`
ESTIMATED_ULIMIT=`expr 2 \* ${WAREHOUSES}`
ESTIMATED_ULIMIT=`expr ${ESTIMATED_ULIMIT} \* ${THREADS_PER_WAREHOUSE}`
ESTIMATED_ULIMIT=`expr ${ESTIMATED_ULIMIT} + ${DBCON}`
if [ ${ULIMIT_N} -lt ${ESTIMATED_ULIMIT} ]; then
	usage "you're open files ulimit is too small, must be at least ${ESTIMATED_ULIMIT}"
	exit 1
fi

CLIENT_OUTPUT_DIR=${OUTPUT_DIR}/client
DRIVER_OUTPUT_DIR=${OUTPUT_DIR}/driver
DB_OUTPUT_DIR=${OUTPUT_DIR}/db

REPORT_FILE="${OUTPUT_DIR}/report.txt"

#
# Create the directories we will need.
#
make_directories
if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	#
	# Create direcotires on the database server if specified.
	#
	make_directories ${DB_HOSTNAME}
	#
	# We want to sync everything with the system executing this script so
	# use rsync to delete any files that may be on the database system but
	# only in the database output directory.
	#
	rsync -a -e "ssh" --delete ${DB_OUTPUT_DIR}/ \
			${DB_HOSTNAME}:${DB_OUTPUT_DIR}/
fi

# Create a readme file in the output directory and date it.
date >> ${OUTPUT_DIR}/readme.txt
echo "$COMMENT" >> ${OUTPUT_DIR}/readme.txt
uname -a >> ${OUTPUT_DIR}/readme.txt
echo "Command line: $0 $@" >> ${OUTPUT_DIR}/readme.txt

# Output run information into the readme.txt.
echo "Database Scale Factor: $WAREHOUSES warehouses" >> ${OUTPUT_DIR}/readme.txt
echo "Test Duration: $DURATION seconds" >> ${OUTPUT_DIR}/readme.txt
echo "Database Connections: $DBCON" >> ${OUTPUT_DIR}/readme.txt

# Get any OS specific information, if this is a single trier test, then
# the OS parameters will be in the database output directory.
if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	./dbt2-get-os-info -o ${DRIVER_OUTPUT_DIR}/`hostname`/
	DB_COMMAND="ssh ${DB_HOSTNAME}"
	# Get the OS information from the database system.
	${DB_COMMAND} dbt2-get-os-info -o ${DB_OUTPUT_DIR}
	${DB_COMMAND} "uname -a >> ${DB_OUTPUT_DIR}/readme.txt"
else
	./dbt2-get-os-info -o ${DB_OUTPUT_DIR}
fi

if [ "x${DB_COMMAND}" = "x" ]; then
	./dbt2-${DBMS}-stop-db ${MISC_ARG}
else
	${DB_COMMAND} "dbt2-${DBMS}-stop-db ${MISC_ARG}"
fi
if [ $? -ne 0 ]; then
	echo "cleaning up results..."
	rm -rf ${OUTPUT_DIR}
	exit 1
fi

if [ "x${DB_COMMAND}" = "x" ]; then
	eval ./dbt2-${DBMS}-start-db ${DB_PARAMS_ARG} ${MISC_ARG} \
			-o ${DB_OUTPUT_DIR} || exit 1
else
	${DB_COMMAND} "dbt2-${DBMS}-start-db ${DB_PARAMS_ARG} ${MISC_ARG} \
			-o ${DB_OUTPUT_DIR}" || exit 1
fi

#
# Redisplay the test parameters.
#
echo "DBT-2 test for ${DBMS} started..."
echo ""
echo "DATABASE SYSTEM: ${DB_HOSTNAME}"
if [ "${DBMS}" = "pgsql" ] || [ "${DBMS}" = "mysql" ] || [ "${DBMS}" = "drizzle" ]; then
	echo "DATABASE NAME: ${DBNAME}"
fi

#
# Build up the client command line arguments.
#

if [ -n "${DB_USER}" ]; then
	echo "DATABASE USER: ${DB_USER}"
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -u ${DB_USER}"
fi

if [ -n "${DB_PASSWORD}" ]; then
	echo "DATABASE PASSWORD: *******"
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -a ${DB_PASSWORD}"
fi

if [ -n "${DB_SOCKET}" ]; then
	echo "DATABASE SOCKET: ${DB_SOCKET}"
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -t ${DB_SOCKET}"
fi

if [ -n "${DB_PORT}" ]; then
	echo "DATABASE PORT: ${DB_PORT}"
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} ${DB_PORT_ARG}"
fi

THREADS=`expr ${WAREHOUSES} \* ${THREADS_PER_WAREHOUSE}`
echo "DATABASE CONNECTIONS: ${DBCON}"
echo "TERMINAL THREADS: ${THREADS}"
echo "TERMINALS PER WAREHOUSE: ${THREADS_PER_WAREHOUSE}"
echo "WAREHOUSES PER THREAD/CLIENT PAIR: ${W_CHUNK}"
echo "SCALE FACTOR (WAREHOUSES): ${WAREHOUSES}"
echo "DURATION OF TEST (in sec): ${DURATION}"
echo "1 client stared every ${SLEEPY} millisecond(s)"
echo ""

#
# Start the client.
#
echo "Stage 1. Starting up client..."
if [ ${DBMS} = "pgsql" ]; then
	if [ ${USE_PGPOOL} -eq 1 ]; then
		echo "Starting pgpool..."
		pgpool -f ${DIR}/pgsql/pgpool.conf
		TMP_DB_HOSTNAME="localhost"
	else
		TMP_DB_HOSTNAME=${DB_HOSTNAME}
	fi
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -d ${TMP_DB_HOSTNAME}"
elif [ ${DBMS} = "mysql" ]; then
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -d ${DBNAME}"
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} ${SOCK_FILE_ARG} -u root"
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -h ${DB_HOSTNAME}"
elif [ ${DBMS} = "sqlite" ]; then
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -d ${DB_PARAMS}"
elif [ ${DBMS} = "drizzle" ]; then
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -h ${DB_HOSTNAME} -d ${DBNAME} -u root"
fi
CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -f -c ${DBCON} -s ${SLEEPY}"
END=0
START=1
#
# Count of the number of clients run.
#
SEG=0
PORT=30000
while [ ${END} -lt ${WAREHOUSES} ]; do
	START=`expr ${END} + 1`
	END=`expr ${START} + ${W_CHUNK}`
	END=`expr ${END} - 1`
	SEG=`expr ${SEG} + 1`

	if [ ${END} -gt ${WAREHOUSES} ]; then
		END=${WAREHOUSES}
	fi

	CDIR="${CLIENT_OUTPUT_DIR}/`hostname`.${SEG}"
	mkdir -p ${CDIR}
	./dbt2-client ${CLIENT_COMMAND_ARGS} -p ${PORT} -o ${CDIR} > \
			${CLIENT_OUTPUT_DIR}/`hostname`/client-${SEG}.out 2>&1 || exit 1 &
	PORT=`expr ${PORT} + 1`
done

# Sleep long enough for all the client database connections to be established.
SLEEPYTIME=${W_CHUNK}
SLEEPYTIME=`expr ${SLEEPYTIME} \* ${SLEEPY}`
SLEEPYTIME=`expr ${SLEEPYTIME} / 1000`
SLEEPYTIME=`expr ${SLEEPYTIME} + 1`
do_sleep ${SLEEPYTIME}

# Start collecting data before we start the test.
SLEEP_RAMPUP=`expr ${W_CHUNK} + 1`
SLEEP_RAMPUP=`expr ${SLEEP_RAMPUP} \* 10`
SLEEP_RAMPUP=`expr ${SLEEP_RAMPUP} \* ${SLEEPY}`
SLEEP_RAMPUP=`expr ${SLEEP_RAMPUP} / 1000`
SLEEPYTIME=`expr ${SLEEP_RAMPUP} + ${DURATION}`
SAMPLE_LENGTH=60
ITERATIONS=`expr ${SLEEPYTIME} / ${SAMPLE_LENGTH}`
ITERATIONS=`expr ${ITERATIONS} + 1`
if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	./dbt2-sysstats \
			--iter ${ITERATIONS} \
			--sample ${SAMPLE_LENGTH} \
			--outdir ${DRIVER_OUTPUT_DIR}/`hostname` > ${DRIVER_OUTPUT_DIR}/`hostname`/stats.out 2>&1 &

	${DB_COMMAND} "dbt2-sysstats --iter ${ITERATIONS} --sample ${SAMPLE_LENGTH} --outdir ${DB_OUTPUT_DIR} > ${DB_OUTPUT_DIR}/stats.out 2>&1" &
else
	./dbt2-sysstats \
			--iter ${ITERATIONS} \
			--sample ${SAMPLE_LENGTH} \
			--outdir ${DB_OUTPUT_DIR}/`hostname` > ${DRIVER_OUTPUT_DIR}/`hostname`/stats.out 2>&1 &
fi

echo "collecting database statistics..."
${DB_COMMAND} dbt2-${DBMS}-db-stat \
		-o ${DB_OUTPUT_DIR} -i ${ITERATIONS} -s ${SAMPLE_LENGTH} \
		${DB_PORT_ARG} > ${DB_OUTPUT_DIR}/dbstats.out 2>&1 &

# Initialize oprofile before we start the driver.
if [ ${USE_OPROFILE} -eq 1 ]; then
	oprofile_init
	if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		oprofile_init ${DB_HOSTNAME}
	fi
fi

# Start the driver.
echo ''
echo "Stage 2. Starting up driver..."
echo "${SLEEPY} threads started per millisecond"

END=0
START=1
#
# Count of the number of drivers run.
#
SEG=0
PORT=30000
while [ ${END} -lt ${WAREHOUSES} ]; do
	START=`expr ${END} + 1`
	END=`expr ${START} + ${W_CHUNK}`
	END=`expr ${END} - 1`
	SEG=`expr ${SEG} + 1`

	if [ ${END} -gt ${WAREHOUSES} ]; then
		END=${WAREHOUSES}
	fi

	DDIR="${DRIVER_OUTPUT_DIR}/`hostname`.${SEG}"
	mkdir -p ${DDIR}
	DRIVER_COMMAND_ARGS="-d ${CLIENT_HOSTNAME} -p ${PORT} -l ${DURATION} -wmin ${START} -wmax ${END} -w ${WAREHOUSES} -sleep ${SLEEPY} -outdir ${DDIR} -tpw ${THREADS_PER_WAREHOUSE} ${NO_THINK}"
	PORT=`expr ${PORT} + 1`
	./dbt2-driver ${DRIVER_COMMAND_ARGS} > \
			${DRIVER_OUTPUT_DIR}/`hostname`/driver-${SEG}.out 2>&1 || exit 1&
done

echo -n "estimated rampup time: "
do_sleep $SLEEP_RAMPUP
echo "estimated rampup time has elapsed"

# Clear the readprofile data after the driver ramps up.
if [ -f "/proc/profile" ]; then
	readprofile_clear
	if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		readprofile_clear ${DB_HOSTNAME}
	fi
fi

# Reset the oprofile counters after the driver ramps up.
if [ ${USE_OPROFILE} -eq 1 ]; then
	oprofile_reset
	if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		oprofile_reset ${DB_HOSTNAME}
	fi
fi

# Start perf data collection
if [ ${USE_PERF} -eq 1 ]; then
	perf_start ${OUTPUT_DIR} &
	if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		perf_start ${DB_OUTPUT_DIR} ${DB_HOSTNAME} &
	fi
fi

# Sleep for the duration of the run.
echo -n "estimated steady state time: "
do_sleep $DURATION

# Collect readprofile data.
if [ -f "/proc/profile" ]; then
	readprofile_collect ${DRIVER_OUTPUT_DIR}/`hostname`
	if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		readprofile_collect ${DB_OUTPUT_DIR} ${DB_HOSTNAME}
	fi
fi

# Collect oprofile data.
if [ ${USE_OPROFILE} -eq 1 ]; then
	oprofile_collect ${OUTPUT_DIR}
	if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		oprofile_collect ${DB_OUTPUT_DIR} ${DB_HOSTNAME}
	fi
fi

# Collect perf data.
if [ ${USE_PERF} -eq 1 ]; then
	perf_collect ${OUTPUT_DIR}
	if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		perf_collect ${DB_OUTPUT_DIR} ${DB_HOSTNAME}
	fi
fi

echo ''
echo "Stage 3. Processing of results..."

# Client doesn't go away by itself like the driver does, so kill it.
echo "Killing client..."
killall dbt2-client dbt2-driver 2> /dev/null

if [ "x${DB_COMMAND}" = "x" ]; then
	./dbt2-${DBMS}-stop-db ${MISC_ARG}
else
	${DB_COMMAND} "dbt2-${DBMS}-stop-db ${MISC_ARG}"
fi
if [ ${DBMS} = "pgsql" ]; then
	if [ ${USE_PGPOOL} -eq 1 ]; then
		pgpool -f ${DIR}/pgsql/pgpool.conf stop
	fi
fi

# Run some post processing analysese.
MIXAGG="${OUTPUT_DIR}/mix.log"
# Aggregate all the mix.log file from all possible driver processes into a
# single location to be ananlyzed.
find ${DRIVER_OUTPUT_DIR} -name mix.log | xargs cat | \
		sort -t ',' -k 1 > ${MIXAGG}
./dbt2-post-process ${MIXAGG} > ${REPORT_FILE}

if [ ${USE_OPROFILE} -eq 1 ]; then
	oprofile_annotate ${OUTPUT_DIR} &
	if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		oprofile_annotate ${DB_OUTPUT_DIR} ${DB_HOSTNAME} &
	fi
	wait
fi

if [ ${USE_OPROFILE} -eq 1 ]; then
	oprofile_stop
	if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		oprofile_stop ${DB_HOSTNAME}
	fi
fi

# Post processing of Database Statistics
if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	#
	# If a database system is specified, rsync all the logs back to here.
	#
	rsync -a -e "ssh" --delete ${DB_HOSTNAME}:${DB_OUTPUT_DIR}/ \
			${DB_OUTPUT_DIR}/
	post_process_sar ${DRIVER_OUTPUT_DIR}/`hostname`/sar_raw.out
	# There will only be a sar output file if the database is on a separate
	# system.
	post_process_sar ${DB_OUTPUT_DIR}/sar_raw.out ${DB_HOSTNAME}
else
	post_process_sar ${DB_OUTPUT_DIR}/`hostname`/sar_raw.out
fi

# Change the permissions on the database error log, not readable by other
# users by default.
if [ -f "${DB_OUTPUT_DIR}/log" ]; then
	chmod 644 ${DB_OUTPUT_DIR}/log
fi

echo "Test completed."
echo "Results are in: ${OUTPUT_DIR}"
echo

cat ${REPORT_FILE}
